package controller.protal;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import project.model.AjaxResult;
import project.util.LocationUtil;
import service.protal.ProtalService;

import java.util.Map;

@RestController
public class ProtalController {
    @Autowired
    private ProtalService service;

    /***
     * 获取首页的相关信息
     * @return
     */
    @RequestMapping("index")
    public AjaxResult index(){
        return service.getIndexInfo();
    }

    /***
     * 通过平台的类型查找食品
     * @param id
     * @return
     */
    @RequestMapping("findByType")
    public AjaxResult findByType(@RequestParam("id")String id){
        return service.selectFoodsByType(id);
    }

    @RequestMapping("findShopByName")
    public AjaxResult findByName(@RequestBody Map map){
        if (!map.containsKey("name")){
            return AjaxResult.build("-1","参数错误");
        }
        return service.findShopByName(map);
    }

    /***
     *
     * @param map page 第几页
     *            pageSize 大小
     *            orderBy 字段排序
     *            sort 排序方式 desc asc
     * @return
     */
    @RequestMapping("findByPage")
    public AjaxResult findByPage(@RequestBody Map map){
        return service.selectFoodByOrderBy(map);
    }

    /***
     * 获取用户订单信息
     * @return
     */
    @RequestMapping("getUserOrders")
    public AjaxResult getUserOrder(){
        return service.findUserOrder();
    }

    /***
     * 获取用户的地址信息
     * @return
     */
    @RequestMapping("getUserAddress")
    public AjaxResult findUserAddress(){
        return service.findUserAddress();
    }
    @RequestMapping("findShopByType")
    public AjaxResult findShopByType(@RequestBody Map map){
        if (!map.containsKey("type")){
            return AjaxResult.build("-1","参数错误");
        }
        return service.findShopByType(map.get("type").toString());
    }

    @RequestMapping("getInstance")
    public AjaxResult getInstance(@RequestBody Map map){
        if (map.containsKey("lon")&&map.containsKey("lat")){
            double lon_=113.961846;
            double lat_=27.134073;
            double lon=Double.parseDouble(map.get("lon").toString());
            double lat=Double.parseDouble(map.get("lat").toString());
            double perKMprice=2.0;
            double money=3.0;
//          最低配送费
            // TODO: 2019/3/20
            double km=LocationUtil.getDistance(lon,lat,lon_,lat_);
            double temp=km-2.5;
            if (temp>0){
                double rs=Math.round(temp);
                money+=(rs>km?rs*perKMprice:((int)km+0.5)*perKMprice);
                System.out.println();
            }
            return AjaxResult.build("1","系统响应了你的请求",money);
        }
        return AjaxResult.build("-1","参数错误");
    }
}
