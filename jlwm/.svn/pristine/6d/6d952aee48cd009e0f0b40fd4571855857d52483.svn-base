package controller.user.impl;

import controller.user.UserDao;
import model.user.User;
import net.sf.json.JSONObject;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.validation.BindingResult;
import org.springframework.validation.ObjectError;
import org.springframework.web.bind.annotation.*;
import project.model.AjaxResult;
import project.util.MD5;
import project.util.ShiroUtil;
import project.util.StringUtils;
import project.util.wx.AesCbcUtil;
import project.util.wx.HttpRequest;
import service.user.impl.UserServiceImpl;

import javax.validation.Valid;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/***
 * 用户控制层接口
 */
@RequestMapping(value = "user")
@RestController
public class UserController implements UserDao {
    @Autowired
    private UserServiceImpl userService;

    private Logger log= LoggerFactory.getLogger(UserController.class);
    /***
     * 用户登录接口
     * @param user 前台用户登录数据对象
     * @return
     */
    @RequestMapping(value = "login",method = RequestMethod.POST)
    public Object login(@RequestBody User user) {
        if (user==null){
            return AjaxResult.build("-1","参数错误!");
        }
        user.setPassword(MD5.GetPwd(user.getPassword()));
        AjaxResult result=  userService.selectOne(user);
        user= (User) result.getObj();
        if (result.getObj()==null){
            return AjaxResult.build("0","用户名或密码错误");
        }
        //存在用户存入session中
        ShiroUtil.setAttribute("user",result.getObj());
//        shiro 登录操作 不执行会拦截请求 简单的采用了 session验证。
        ShiroUtil.login(user.getName(),user.getPassword(),false);
        //清空密码不返回给前端
        user.setPassword(null);
        return AjaxResult.build("1","登录成功!",user);
    }

    /**
     * 解密用户敏感数据
     *
     * @param encryptedData 明文,加密数据
     * @param iv            加密算法的初始向量
     * @param code          用户允许登录后，回调内容会带上 code（有效期五分钟），开发者需要将 code 发送到开发者服务器后台，使用code 换取 session_key api，将 code 换成 openid 和 session_key
     * @return
     */
    @ResponseBody
    @RequestMapping(value = "/decodeUserInfo", method = RequestMethod.POST)
    public Map decodeUserInfo(String encryptedData, String iv, String code) {

        Map map = new HashMap();
        //登录凭证不能为空
        if (code == null || code.length() == 0) {
            map.put("status", 0);
            map.put("msg", "code 不能为空");
            return map;
        }

        //小程序唯一标识   (在微信小程序管理后台获取)
        String wxspAppid = "xxxxxxxxxxxxxx";
        //小程序的 app secret (在微信小程序管理后台获取)
        String wxspSecret = "xxxxxxxxxxxxxx";
        //授权（必填）
        String grant_type = "authorization_code";

        //1、向微信服务器 使用登录凭证 code 获取 session_key 和 openid ///
        //请求参数
        String params = "appid=" + wxspAppid + "&secret=" + wxspSecret + "&js_code=" + code + "&grant_type=" + grant_type;
        //发送请求
        String sr = HttpRequest.sendGet("https://api.weixin.qq.com/sns/jscode2session", params);
        //解析相应内容（转换成json对象）
        JSONObject json = JSONObject.fromObject(sr);
        //获取会话密钥（session_key）
        String session_key = json.get("session_key").toString();
        //用户的唯一标识（openid）
        String openid = (String) json.get("openid");

        // 2、对encryptedData加密数据进行AES解密 //
        try {
            String result = AesCbcUtil.decrypt(encryptedData, session_key, iv, "UTF-8");
            if (null != result && result.length() > 0) {
                map.put("status", 1);
                map.put("msg", "解密成功");
                JSONObject userInfoJSON = JSONObject.fromObject(result);
                Map userInfo = new HashMap();
                userInfo.put("openId", userInfoJSON.get("openId"));
                userInfo.put("nickName", userInfoJSON.get("nickName"));
                userInfo.put("gender", userInfoJSON.get("gender"));
                userInfo.put("city", userInfoJSON.get("city"));
                userInfo.put("province", userInfoJSON.get("province"));
                userInfo.put("country", userInfoJSON.get("country"));
                userInfo.put("avatarUrl", userInfoJSON.get("avatarUrl"));
                userInfo.put("unionId", userInfoJSON.get("unionId"));
                map.put("userInfo", userInfo);
                return map;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        map.put("status", 0);
        map.put("msg", "解密失败");
        return map;
    }

    @PostMapping(value = "wxLogin")
    public Object wxLogin(){
        return null;
    }
    /***
     * 用户安全注销登录接口
     * @return 操作结果
     */
    @RequestMapping(value = "logOut")
    public Object logOut() {
        ShiroUtil.invalidate();
        return AjaxResult.build("1", "注销登陆");
    }

    /***
     * 用户注册接口
     * @param user 表单数据 或json对象
     * @param result 表单校验 无需传递
     * @return 操作返回状态
     */
    @PostMapping(value = "reg")
    public Object register(@Valid @RequestBody User user, BindingResult result) {
        if (result.hasErrors()) {
            List<ObjectError> errorList = result.getAllErrors();
            return AjaxResult.build("-1", "注册失败", errorList);
        }
//       初始化用户Id
        user.setId(StringUtils.getUUID());
        //md5盐值加密
        user.setCreateDate(new Date());
//      账号创建的时间
        user.setPassword(MD5.GetPwd(user.getPassword()));
        return userService.save(user);
    }
    /***
     *
     * @param user
     * @param result
     * @return
     */
    @PostMapping(value = "update")
    public Object updateUserInfo(@Valid @RequestBody User user, BindingResult result) {
        if (result.hasErrors()) {
            List<ObjectError> errorList = result.getAllErrors();
            return AjaxResult.build("-1", "数据格式不正确", errorList);
        }
        return userService.update(user);
    }

}
