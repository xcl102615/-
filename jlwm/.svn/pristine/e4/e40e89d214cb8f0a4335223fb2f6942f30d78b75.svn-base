<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd">
    <!-- 会话Session ID生成器 -->
    <bean id="sessionIdGenerator" class="org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator"/>

    <!-- 会话Cookie模板 -->
    <bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <!--value 代表着 cookie的 名字-->
        <constructor-arg value="iooint"/>
        <property name="httpOnly" value="true"/>
        <property name="path" value="/"/>
        <!--<property name="domain" value="192.168.31.141"/>-->
        <property name="maxAge" value="-1"/>
    </bean>

    <!-- 用户信息记住我功能的相关配置 -->
    <bean id="rememberMeCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <constructor-arg value="re-iooint"/>
        <property name="httpOnly" value="true"/>
        <property name="maxAge" value="2592000"/><!-- 30天时间 -->
    </bean>
    <!-- rememberMe管理器 -->
    <bean id="rememberMeManager" class="org.apache.shiro.web.mgt.CookieRememberMeManager">
        <property name="cipherKey" value="#{T(org.apache.shiro.codec.Base64).decode('3AvVhmFLUs0KTA3Kprsdag==')}" />
        <property name="cookie" ref="rememberMeCookie" />
    </bean>

    <!-- 会话验证调度器 -->
    <bean id="sessionValidationScheduler" class="org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler">
        <property name="interval" value="${session.validate.timespan}"/>
        <property name="sessionManager" ref="sessionManager"/>
    </bean>
    <!-- 静态注入，相当于调用SecurityUtils.setSecurityManager(securityManager) -->
    <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="staticMethod" value="org.apache.shiro.SecurityUtils.setSecurityManager"/>
        <property name="arguments" ref="securityManager"/>
    </bean>

    <!-- Session Manager -->
    <bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
        <!-- 相隔多久检查一次session的有效性   -->
        <property name="sessionValidationInterval" value="${session.validate.timespan}"/>
        <!-- session 有效时间为半小时 （毫秒单位）-->
        <property name="globalSessionTimeout" value="${session.timeout}"/>

        <!-- 间隔多少时间检查，不配置是60分钟 -->
        <property name="sessionValidationScheduler" ref="sessionValidationScheduler"/>
        <!-- 是否开启 检测，默认开启 -->
        <property name="sessionValidationSchedulerEnabled" value="true"/>
        <!-- 是否删除无效的，默认也是开启 -->
        <property name="deleteInvalidSessions" value="true"/>
        <!-- 会话Cookie模板 -->
        <property name="sessionIdCookie" ref="sessionIdCookie"/>

    </bean>

    <!-- 配置 CacheManager -->
    <bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
        <property name="cacheManagerConfigFile" value="classpath:ehcache-shiro.xml"/>
    </bean>

    <!-- 項目自定义的Realm -->
    <bean id="shiroRealm" class="project.shiro.realm.ShiroRealm" >
        <property name="cacheManager" ref="cacheManager"/>
    </bean>
    <!--shiro-->
    <bean id="securityManager"
          class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="realm" ref="shiroRealm" />
        <property name="sessionManager" ref="sessionManager"/>
        <property name="rememberMeManager" ref="rememberMeManager"/>
        <property name="cacheManager" ref="cacheManager"></property>
    </bean>

    <!-- shiro为集成spring -->
    <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        <property name="exceptionMappings">
            <props>
                <prop key="org.apache.shiro.authz.UnauthorizedException">/login.jsp</prop>
            </props>
        </property>
    </bean>

    <!-- Shiro生命周期处理器-->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />
    <!-- 配置 Shiro Filter! 拦截哪些资源以及登陆登出的基本信息 -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
        <!-- 配置登陆页面 -->
        <property name="loginUrl" value="/login.jsp"/>
        <!-- 配置若没有权限则重定向的响应页面 -->
        <property name="unauthorizedUrl" value="/unauthorized.jsp"/>

        <!-- 配置需要拦截的页面, 以及访问这些页面需要的权限 -->
        <!-- 具体格式为: 资源 = shiro 内置过滤器的别名 -->
        <!-- 读取初始自定义权限内容-->
        <property name="filterChainDefinitions">
            <value>
                <!--
                   常用的 过滤器
                   anon  允许匿名访问
                   authc 需要认证才能使用
                   roles roles["admin,guest"],每个参数通过才算通过，相当于hasAllRoles()方法。
                   user 没有参数表示必须存在用户，当登入操作时不做检查
                   perms perms["user:add:*,user:modify:*"]，当有多个参数时必须每个参数都通过才通过
               -->
                <!--匹配顺序 从上到下-->
                / = anon
                /* =anon
                /static/** = anon
                /css/** =anon
                /fonts/** =anon
                /header/** =anon
                /images/** =anon
                /plugins/** =anon
                /script/** =anon
                /delivery/login = anon
                /delivery/new_account = anon
                /delivery/retrievePassword = anon
                /wchatPay/** =anon
                /wechat/** =anon
                /admin/login = anon
                /admin/register = anon
                <!--用户操作需要授权-->
                <!--/user/** = authc-->
                /user/* = anon
                <!--其他路径都需要验证-->
                /** = authc
            </value>
        </property>
    </bean>
</beans>