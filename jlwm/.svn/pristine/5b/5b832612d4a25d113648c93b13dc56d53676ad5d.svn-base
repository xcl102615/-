package service.wxService;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import dao.wx.MessagePushDao;
import model.messagePush.AccessToken;
import model.messagePush.MessageUserInfo;
import model.messagePush.MessageUseropen;
import model.messagePush.ResultTemplateDate;
import model.order.Order;
import model.order.OrderDetails;
import model.shop.Shop;
import model.user.User;
import org.apache.http.HttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.ContentType;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.util.EntityUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.alibaba.fastjson.JSONObject;
import project.model.AjaxResult;
import project.util.StringUtils;
import project.util.PublicAddress;
import project.util.wx.config.Template;
import service.order.impl.OrderServiceImpl;
import service.shop.impl.ShopServiceImpl;
import service.user.impl.UserServiceImpl;

/**
 * @author ls
 * @version 创建时间：2019年1月23日 下午8:37:36
 * @ClassName 类名称
 * @Description 类描述
 */
@Service
public class MessagePushService {

	private static Logger log = LoggerFactory.getLogger(MessagePushService.class);

	@Autowired
	private MessagePushDao messagePushDao;
	@Autowired
	private OrderServiceImpl orderService;
	@Autowired
	private ShopServiceImpl shopService;
	@Autowired
	private UserServiceImpl userService;

	/**
	 * 获取UserInfo
	 * 
	 */
	public MessageUserInfo getUserInfoByOpenId(String AccessToken, String openId) {
		String tmpUrl = "https://api.weixin.qq.com/cgi-bin/user/info?access_token=" + AccessToken + "&openid="
				+ openId;
		CloseableHttpClient httpCilent = HttpClients.createDefault();
		HttpGet httpGet = new HttpGet(tmpUrl);
		try {
			HttpResponse httpResponse = httpCilent.execute(httpGet);
			if (httpResponse.getStatusLine().getStatusCode() == 200) {
				String entity = EntityUtils.toString(httpResponse.getEntity(),"UTF-8");
				MessageUserInfo userinfo = JSONObject.parseObject(entity, MessageUserInfo.class);
				if (userinfo != null) {
					return userinfo;
				}
				return null;
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				// 释放资源
				httpCilent.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		return null;

	}

	/**
	 * 获取公众号所有关注者的openid
	 * 
	 */
	public List<String> getOpenIds(String AccessToken) {
		String tmpUrl = "https://api.weixin.qq.com/cgi-bin/user/get?access_token=" + AccessToken;
		CloseableHttpClient httpCilent = HttpClients.createDefault();
		HttpGet httpGet = new HttpGet(tmpUrl);
		try {
			HttpResponse httpResponse = httpCilent.execute(httpGet);
			if (httpResponse.getStatusLine().getStatusCode() == 200) {
				String entity = EntityUtils.toString(httpResponse.getEntity());
				MessageUseropen useropen = JSONObject.parseObject(entity, MessageUseropen.class);

				List<String> list = useropen.getData().get("openid");
				if (list != null && list.size() > 0) {
					return list;
				}

				return null;
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				// 释放资源
				httpCilent.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		return null;
	}

	/**
	 * 根据微信id，secret获取access_token
	 * 
	 */
	public String getAccessToken() {
		//https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&appid=APPID&secret=APPSECRET
		String tmpUrl = "https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&appid="
				+ PublicAddress.appId_jlkj + "&secret=" + PublicAddress.appSecret_jlkj;
		CloseableHttpClient httpCilent = HttpClients.createDefault();
		HttpGet httpGet = new HttpGet(tmpUrl);
		try {
			HttpResponse httpResponse = httpCilent.execute(httpGet);
			if (httpResponse.getStatusLine().getStatusCode() == 200) {
				String entity = EntityUtils.toString(httpResponse.getEntity());
				AccessToken accessToken = JSONObject.parseObject(entity, AccessToken.class);
				return accessToken.getAccess_token();
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				// 释放资源
				httpCilent.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		return "";
	}

	
	/**
	 * 根据微信用戶小程序id，secret获取access_token
	 * 
	 */
	public String getAccessToken_jlxcx() {
		//https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&appid=APPID&secret=APPSECRET
		String tmpUrl = "https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&appid="
				+ PublicAddress.appId_jlxcx + "&secret=" + PublicAddress.appSecret_jlxcx;
		CloseableHttpClient httpCilent = HttpClients.createDefault();
		HttpGet httpGet = new HttpGet(tmpUrl);
		try {
			HttpResponse httpResponse = httpCilent.execute(httpGet);
			if (httpResponse.getStatusLine().getStatusCode() == 200) {
				String entity = EntityUtils.toString(httpResponse.getEntity());
				AccessToken accessToken = JSONObject.parseObject(entity, AccessToken.class);
				return accessToken.getAccess_token();
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				// 释放资源
				httpCilent.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		return "";
	}
	
	/**
	 * 发送微信消息模板
	 * 
	 */
	public String sendTemplate(String touser, String templateId, Map<String, String> map, String id) {
		String tepUrl = "https://api.weixin.qq.com/cgi-bin/message/template/send?access_token=" + getAccessToken();
		if(getAccessToken()==null){

			return "getAccessToken值获取失败";
		}
		CloseableHttpClient httpClient = HttpClients.createDefault();
		HttpPost httpPost = new HttpPost(tepUrl);
		// 装配post请求参数
		JSONObject json = new JSONObject();
		json.put("touser", touser);// 用户openid
		json.put("template_id", templateId);// 模板id
		//json.put("appid", PublicAddress.appId_jlsh);// 关联小程序appid
		json.put("url",PublicAddress.url);// 跳转地址
		JSONObject data = new JSONObject();
		//data.put("appid", PublicAddress.appId_jlsh);
		//data.put("pagepath", PublicAddress.url+id);
		json.put("miniprogram", data);
		
		
		JSONObject dataJson = new JSONObject();

		data = new JSONObject();

		// 标题
		data.put("value", map.get("first"));
		data.put("color", "#157efb");
		dataJson.put("first", data);

		// 商品名称
		data = new JSONObject();
		data.put("value", map.get("keyword1"));
		data.put("color", "#333");
		dataJson.put("keyword1", data);

		// 下单事件
		data = new JSONObject();
		data.put("value", map.get("keyword2"));
		data.put("color", "#333");
		dataJson.put("keyword2", data);

		// 付款金额
		data = new JSONObject();
		data.put("value", map.get("keyword3"));
		data.put("color", "#333");
		dataJson.put("keyword3", data);
		// 客户信息
		data = new JSONObject();
		data.put("value", map.get("keyword4"));
		data.put("color", "#333");
		dataJson.put("keyword4", data);

        // 配送地址
        data = new JSONObject();
        data.put("value", map.get("keyword5"));
        data.put("color", "#333");
        dataJson.put("keyword5", data);
		// 提示信息
		data = new JSONObject();
		data.put("value", map.get("remark"));
		data.put("color", "#157efb");
		dataJson.put("remark", data);

		json.put("data", dataJson);
		String resultStr = "发送失败";
		try {
			StringEntity myEntity = new StringEntity(json.toJSONString(), ContentType.APPLICATION_JSON);
			// 设置post求情参数
			httpPost.setEntity(myEntity);
			HttpResponse httpResponse = httpClient.execute(httpPost);
			if (httpResponse.getStatusLine().getStatusCode() == 200) {
				// 发送成功
				String resutlEntity = EntityUtils.toString(httpResponse.getEntity());
				ResultTemplateDate resultTemplateDate = JSONObject.parseObject(resutlEntity, ResultTemplateDate.class);
				System.out.println(
						"返回信息：" + resultTemplateDate.getErrmsg() + "---返回状态码：" + resultTemplateDate.getErrcode());
				if (resultTemplateDate.getErrcode().equals("40037")) {
					resultStr = "template_id不正确";
				}
				if (resultTemplateDate.getErrcode().equals("41028")) {
					resultStr = "form_id不正确，或者过期";
				}
				if (resultTemplateDate.getErrcode().equals("41029")) {
					resultStr = "form_id已被使用";
				}
				if (resultTemplateDate.getErrcode().equals("41030")) {
					resultStr = "page不正确";
				}
				if (resultTemplateDate.getErrcode().equals("45009")) {
					resultStr = "接口调用超过限额（目前默认每个帐号日调用限额为100万）";

				}
				if (resultTemplateDate.getErrcode().equals("0") && resultTemplateDate.getErrmsg().equals("ok")) {
					resultStr = "ok";
				}

				return resultStr;
			} else {
				// 发送失败
				return resultStr;
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				if (httpClient != null) {
					// 释放资源
					httpClient.close();
				}
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		return resultStr;
	}


	/******
	 * 用户关注和取关事件
	 * @return
	 * @throws Exception
	 */
	public Object event(String Event, String openid,Map map) throws Exception {
		if(Event==null){
			return "失败";
		}
		if(Event.equals("subscribe")){
			//用户关注事件
			log.info("用户关注事件");
			String accessToken=getAccessToken();//获取accessToken
			MessageUserInfo messageUserInfo=getUserInfoByOpenId(accessToken,openid);//获取用户信息
			messageUserInfo.setId(StringUtils.getUUID());
			messageUserInfo.setEvent(map.get("Event").toString());
			messageUserInfo.setMsgType(map.get("MsgType").toString());
			messageUserInfo.setToUserName(map.get("ToUserName").toString());
			messageUserInfo.setNickname(StringUtils.ToUnicode(messageUserInfo.getNickname()));
			int i=messagePushDao.addUser(messageUserInfo);
			if(i<=0){
				return AjaxResult.build("0","新增用户失败") ;
			}
			return AjaxResult.build("1","用户关注事件成功");
		}else{
			//用户取关事件
			log.info("用户取关事件");

			int i=messagePushDao.delUser(openid);
			if(i<=0){
				return AjaxResult.build("0","删除用户失败") ;
			}
			return AjaxResult.build("1","用户取关事件成功");
		}

	}
	public Object select(String unionid){
		return messagePushDao.select(unionid);
	}


	/**
	 * 给商家推送模板消息
	 * @param id
	 * @return
	 */
	public AjaxResult sendTemplateBll(String id) {
		Order order = (Order) orderService.selectOneById(id).getObj();
		Shop shop = (Shop) shopService.selectOneById(order.getShop().getId()).getObj();
		User user=(User) userService.selectOneById(shop.getUser().getId()).getObj();
		String unionid=user.getUnionid();//商家unionid标识
		if(unionid.equals("")){
			return AjaxResult.build("0","商家注册未存unionid");
		}
		MessageUserInfo messageUserInfo=(MessageUserInfo) messagePushDao.select(unionid);//通过unionid获取关注列表用户信息
		if(messageUserInfo==null){
			return AjaxResult.build("0","该商家未关注计里科技公众号");
		}
		String openId=messageUserInfo.getOpenid();//获取商家的openid唯一标识符
		System.out.println("商家openId:--------------"+openId);
		System.out.println(order);
		String foodName = "";
		for (OrderDetails orderDetails : order.getOrderDetails()) {
			foodName += orderDetails.getFoodName() + "X" + orderDetails.getNum() + ",";
		}
		Map<String, String> hmap = new HashMap<String, String>();
		hmap.put("first", "您有一个新的外卖订单！");
		hmap.put("keyword1", foodName);
		hmap.put("keyword2", StringUtils.dateToString(order.getPaymentTime()));//订单总结
		hmap.put("keyword3", String.valueOf(StringUtils.sub(order.getRealPay(),order.getDeliveryPrice())));//获取用户名称
		hmap.put("keyword4", order.getAddress().getName() + "," + order.getAddress().getPhone());
		hmap.put("keyword5", order.getAddress().getLocation());
		hmap.put("remark", "用户已付款，赶快接单吧");
		//oAr-B5xVQJ7POEi_lgNb9PFEB-i0   oAr-B52hE9c18pQF8qafSon3b3rc
		String str = sendTemplate(openId, Template.toBePaid, hmap, id);
		if (str.equals("ok")) {
			return AjaxResult.build("1", "已通知商家");
		}
		return AjaxResult.build("0", "通知商家失败");
	}

	/**
	 * 获取所有关注公众号的用户信息
	 * @return
	 */
	public AjaxResult getAllUserInfo(){
		String accessToken=getAccessToken();
		if(accessToken==null){
			return AjaxResult.build("0","accessToken值不能为空!");
		}
		log.info("-----------------getAccessToken"+accessToken);
		List<String> openIdlist=getOpenIds(getAccessToken());

		if(openIdlist.size()<=0){
			return AjaxResult.build("0","未查到openIds集合");
		}
		List userInfolist = new ArrayList();
		for(String openId:openIdlist ){
			MessageUserInfo messageUserInfo=getUserInfoByOpenId(accessToken,openId);
			userInfolist.add(messageUserInfo);
		}
		return AjaxResult.build("1","查询成功",userInfolist);
	}
}
